## Registers

# | Register | Usage     | Type    | Description                                      |
# | -------- | --------- | ------- | ------------------------------------------------ |
# | `$a0`    | input     | integer | year to check                                    |
# | `$v0`    | output    | boolean | input is leap year (`0` = `false`, `1` = `true`) |
# | `$t0-9`  | temporary | any     | used for temporary storage                       |

.globl is_leap_year

# This approach uses a chain of boolean tests, shortcircuiting when a condition fails,
# but the chain tests the least likely cases first. It is the reverse of the traditional
# boolean chain approach.
# It corresponds roughly to this C code:
#
# ```c
# int is_leap_year(int year) {
#     return year % 400 == 0 || year % 100 != 0 && year % 4 == 0;
# }
# ```

is_leap_year:
        li      $v0, 0

        li      $t0, 400
        div     $a0, $t0
        mfhi    $t0
        beqz    $t0, set_leap

        li      $t0, 100
        div     $a0, $t0
        mfhi    $t0
        beqz    $t0, end

        li      $t0, 4
        div     $a0, $t0
        mfhi    $t0
        bnez    $t0, end

set_leap:
        li      $v0, 1
end:
        jr      $ra
