## Registers

# | Register | Usage     | Type    | Description                                      |
# | -------- | --------- | ------- | ------------------------------------------------ |
# | `$a0`    | input     | integer | year to check                                    |
# | `$v0`    | output    | boolean | input is leap year (`0` = `false`, `1` = `true`) |
# | `$t0-9`  | temporary | any     | used for temporary storage                       |

.globl is_leap_year

# This approach precomputes whether the year is divisible by 4, 100 and 400.
# It then uses bitwise operators to perform the same tests as the traditional boolean chain.
# It corresponds roughly to this C code:
#
# ```c
# int is_leap_year(int year) {
#     int divisible_by_4       = year % 4 == 0;
#     int not_divisible_by_100 = year % 100 != 0;
#     int divisible_by_400     = year % 400 == 0;
#
#     return divisible_by_4 && not_divisible_by_100 || divisible_by_400;
# }
# ```

is_leap_year:
        li      $t0, 4
        div     $a0, $t0
        mfhi    $t1
        slti    $t1, $t1, 1

        li      $t0, 100
        div     $a0, $t0
        mfhi    $t2
        li      $t7, 0
        slt     $t2, $t7, $t2

        li      $t0, 400
        div     $a0, $t0
        mfhi    $t3
        slti    $t3, $t3, 1

        and     $v0, $t1, $t2
        or      $v0, $v0, $t3
        beqz    $v0, end

set_leap:
        li      $v0, 1
end:
        jr      $ra
