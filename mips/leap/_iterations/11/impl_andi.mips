## Registers

# | Register | Usage     | Type    | Description                                      |
# | -------- | --------- | ------- | ------------------------------------------------ |
# | `$a0`    | input     | integer | year to check                                    |
# | `$v0`    | output    | boolean | input is leap year (`0` = `false`, `1` = `true`) |
# | `$t0-9`  | temporary | any     | used for temporary storage                       |

.globl is_leap_year

# Alternate implementation using `andi` to determine if a number if divisible by 4:
# if so, its least significant two bits will be 0.
#
# Inspired by the following solution:
# https://exercism.org/tracks/mips/exercises/leap/solutions/keiraville

is_leap_year:
        li      $v0, 0

        andi    $t0, $a0, 3
        bnez    $t0, end

        li      $t0, 100
        div     $a0, $t0
        mfhi    $t0
        bnez    $t0, set_leap

        # quotient from division by 100 is still in `lo`, we
        # can use it to determine if year is divisible by 400.
        mflo    $t0
        andi    $t0, $t0, 3
        bnez    $t0, end

set_leap:
        li      $v0, 1
end:
        jr      $ra

# Corresponding C code:
#
# ```c
# #include <stdlib.h>
#
# int is_leap_year(int year) {
#     if ((year & 3) != 0) {
#         return 0;
#     }
#
#     div_t by_100 = div(year, 100);
#     return by_100.rem != 0 || (by_100.quot & 3) == 0;
# }
# ```
